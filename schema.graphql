### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Bank {
  id: Int!
  nameFull: String!
  nameShort: String!
}

type BankAccount {
  bankId: Int!
  bankName: String!
  id: Int!
  number: String!
}

input BankAccountCreateInput {
  Bank: BankCreateOneWithoutBankAccountInput!
  ListBankAcc: RegisterCreateManyWithoutBankAccountInput
  bankName: String!
  number: String!
}

input BankAccountCreateOneWithoutListBankAccInput {
  connect: BankAccountWhereUniqueInput
  connectOrCreate: BankAccountCreateOrConnectWithoutListBankAccInput
  create: BankAccountCreateWithoutListBankAccInput
}

input BankAccountCreateOrConnectWithoutListBankAccInput {
  create: BankAccountCreateWithoutListBankAccInput!
  where: BankAccountWhereUniqueInput!
}

input BankAccountCreateWithoutListBankAccInput {
  Bank: BankCreateOneWithoutBankAccountInput!
  bankName: String!
  number: String!
}

input BankAccountListRelationFilter {
  every: BankAccountWhereInput
  none: BankAccountWhereInput
  some: BankAccountWhereInput
}

input BankAccountWhereInput {
  AND: [BankAccountWhereInput!]
  Bank: BankWhereInput
  ListBankAcc: RegisterListRelationFilter
  NOT: [BankAccountWhereInput!]
  OR: [BankAccountWhereInput!]
  bankId: IntFilter
  bankName: StringFilter
  id: IntFilter
  number: StringFilter
}

input BankAccountWhereUniqueInput {
  id: Int
}

input BankCreateOneWithoutBankAccountInput {
  connect: BankWhereUniqueInput
  connectOrCreate: BankCreateOrConnectWithoutBankAccountInput
  create: BankCreateWithoutBankAccountInput
}

input BankCreateOrConnectWithoutBankAccountInput {
  create: BankCreateWithoutBankAccountInput!
  where: BankWhereUniqueInput!
}

input BankCreateWithoutBankAccountInput {
  nameFull: String!
  nameShort: String!
}

input BankWhereInput {
  AND: [BankWhereInput!]
  BankAccount: BankAccountListRelationFilter
  NOT: [BankWhereInput!]
  OR: [BankWhereInput!]
  id: IntFilter
  nameFull: StringFilter
  nameShort: StringFilter
}

input BankWhereUniqueInput {
  id: Int
}

type Bonus {
  accept_condition: String!
  id: Int!
}

input BonusCreateOneWithoutRegisterInput {
  connect: BonusWhereUniqueInput
  connectOrCreate: BonusCreateOrConnectWithoutRegisterInput
  create: BonusCreateWithoutRegisterInput
}

input BonusCreateOrConnectWithoutRegisterInput {
  create: BonusCreateWithoutRegisterInput!
  where: BonusWhereUniqueInput!
}

input BonusCreateWithoutRegisterInput {
  accept_condition: String!
}

input BonusWhereInput {
  AND: [BonusWhereInput!]
  NOT: [BonusWhereInput!]
  OR: [BonusWhereInput!]
  Register: RegisterListRelationFilter
  accept_condition: StringFilter
  id: IntFilter
}

input BonusWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneBankAccount(data: BankAccountCreateInput!): BankAccount!
  createOneRegister(data: RegisterCreateInput!): Register!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  bankAccount(where: BankAccountWhereUniqueInput!): BankAccount
  register(where: RegisterWhereUniqueInput!): Register
  registers(after: RegisterWhereUniqueInput, before: RegisterWhereUniqueInput, first: Int, last: Int, where: RegisterWhereInput): [Register!]!
}

enum QueryMode {
  default
  insensitive
}

type Register {
  firstName: String!
  id: Int!
  lastName: String
  lineId: String!
  password: String!
  phone: String!
}

input RegisterCreateInput {
  BankAccount: BankAccountCreateOneWithoutListBankAccInput!
  Bonus: BonusCreateOneWithoutRegisterInput!
  firstName: String!
  lastName: String
  lineId: String!
  password: String!
  phone: String!
}

input RegisterCreateManyWithoutBankAccountInput {
  connect: [RegisterWhereUniqueInput!]
  connectOrCreate: [RegisterCreateOrConnectWithoutBankAccountInput!]
  create: [RegisterCreateWithoutBankAccountInput!]
}

input RegisterCreateOrConnectWithoutBankAccountInput {
  create: RegisterCreateWithoutBankAccountInput!
  where: RegisterWhereUniqueInput!
}

input RegisterCreateWithoutBankAccountInput {
  Bonus: BonusCreateOneWithoutRegisterInput!
  firstName: String!
  lastName: String
  lineId: String!
  password: String!
  phone: String!
}

input RegisterListRelationFilter {
  every: RegisterWhereInput
  none: RegisterWhereInput
  some: RegisterWhereInput
}

input RegisterWhereInput {
  AND: [RegisterWhereInput!]
  BankAccount: BankAccountWhereInput
  Bonus: BonusWhereInput
  NOT: [RegisterWhereInput!]
  OR: [RegisterWhereInput!]
  bankAccountId: IntFilter
  bonusId: IntFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringNullableFilter
  lineId: StringFilter
  password: StringFilter
  phone: StringFilter
}

input RegisterWhereUniqueInput {
  id: Int
  phone: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}
